// Database Types (with yt_ prefix for shared Supabase instance) export interface User { id: string; email: string; plan: 'free' | 'pro' | 'enterprise'; quota_used: number; quota_limit: number; created_at: string; updated_at: string; } export interface Video { id: string; // YouTube video ID title: string; description?: string; channel_id: string; channel_title: string; published_at: string; duration: number; // in seconds view_count: number; like_count: number; comment_count: number; tags: string[]; thumbnails: { default?: { url: string; width: number; height: number }; medium?: { url: string; width: number; height: number }; high?: { url: string; width: number; height: number }; }; ai_summary?: string; sentiment_score?: number; // -1 to 1 keywords: string[]; scraped_at: string; user_id: string; } export interface Channel { id: string; // YouTube channel ID title: string; description?: string; subscriber_count: number; video_count: number; view_count: number; thumbnails: { default?: { url: string; width: number; height: number }; medium?: { url: string; width: number; height: number }; high?: { url: string; width: number; height: number }; }; created_at: string; scraped_at: string; user_id: string; } export interface Comment { id: string; video_id: string; author_name: string; content: string; like_count: number; published_at: string; parent_id?: string; // for replies sentiment: 'positive' | 'negative' | 'neutral'; ai_keywords: string[]; scraped_at: string; } export interface ScrapingTask { id: string; user_id: string; type: 'video' | 'channel' | 'batch'; status: 'pending' | 'running' | 'completed' | 'failed'; input_data: { urls?: string[]; search_query?: string; options?: { include_comments?: boolean; include_subtitles?: boolean; max_comments?: number; }; }; progress: number; // 0-100 result_data?: { videos?: Video[]; channels?: Channel[]; comments?: Comment[]; summary?: { total_processed: number; successful: number; failed: number; }; }; error_message?: string; created_at: string; completed_at?: string; } // API Response Types export interface APIResponse<T = unknown> { success: boolean; data?: T; error?: string; message?: string; } // YouTube API Types export interface YouTubeVideoResponse { kind: string; etag: string; items: YouTubeVideo[]; pageInfo: { totalResults: number; resultsPerPage: number; }; } export interface YouTubeCommentResponse { kind: string; etag: string; items: YouTubeCommentThread[]; pageInfo: { totalResults: number; resultsPerPage: number; }; } export interface YouTubeCommentThread { kind: string; etag: string; id: string; snippet: { topLevelComment: { kind: string; etag: string; id: string; snippet: { authorDisplayName: string; authorProfileImageUrl: string; authorChannelUrl: string; authorChannelId: { value: string; }; videoId: string; textDisplay: string; textOriginal: string; likeCount: number; publishedAt: string; updatedAt: string; }; }; canReply: boolean; totalReplyCount: number; isPublic: boolean; }; } export interface YouTubeVideo { kind: string; etag: string; id: string; snippet: { publishedAt: string; channelId: string; title: string; description: string; thumbnails: { [key: string]: { url: string; width: number; height: number; }; }; channelTitle: string; tags?: string[]; categoryId: string; liveBroadcastContent: string; localized: { title: string; description: string; }; }; statistics: { viewCount: string; likeCount: string; favoriteCount: string; commentCount: string; }; contentDetails: { duration: string; dimension: string; definition: string; caption: string; licensedContent: boolean; projection: string; }; } // AI Analysis Types export interface AIAnalysis { summary: string; sentiment_score: number; keywords: string[]; insights: string[]; recommendations: string[]; trends: { topic: string; confidence: number; }[]; } // UI Component Props Types export interface URLInputProps { onSubmit: (urls: string[]) => void; loading?: boolean; placeholder?: string; } export interface TaskProgressProps { task: ScrapingTask; onCancel?: () => void; } export interface DataTableProps<T> { data: T[]; columns: { key: keyof T; label: string; sortable?: boolean; render?: (value: unknown, item: T) => React.ReactNode; }[]; loading?: boolean; onSort?: (key: keyof T, direction: 'asc' | 'desc') => void; onFilter?: (filters: Record<string, unknown>) => void; } export interface ChartContainerProps { title: string; data: Record<string, unknown>[]; type: 'line' | 'bar' | 'pie' | 'area'; xKey?: string; yKey?: string; height?: number; }

// 导出指纹相关类型
export * from './fingerprint';
export * from './next-auth';
export * from './trial';