/** * 🌍 YouTube Analytics Platform 企业级国际化主配置 * * 基于现代主流网站optimal实践of4层架构设计: * - 🔥 核心层 (Core): 内联加载 (<5KB) * - 📄 页面层 (Pages): 路由加载 (<10KB) * - ⚡ 功能层 (Features): 懒加载 (<15KB) * - 🧩 Components层 (Components): Components加载 (<5KB) * - 🌐 动态层 (Dynamic): data库存储 (无限制) */ // 临时内联定义,避免模块导入问题 const SUPPORTED_LOCALES = { 'en-US': { name: 'English (US)', nativeName: 'English', flag: '🇺🇸', dir: 'ltr', tier: 1, completeness: 100, fallback: null, currency: 'USD', dateFormat: 'MM/DD/YYYY', numberFormat: 'en-US', region: 'Americas', rtl: false }, 'zh-CN': { name: 'Chinese (Simplified)', nativeName: "简体中文", flag: '🇨🇳', dir: 'ltr', tier: 1, completeness: 100, fallback: 'en-US', currency: 'CNY', dateFormat: 'YYYY/MM/DD', numberFormat: 'zh-CN', region: 'Asia', rtl: false }, 'ja-JP': { name: 'Japanese', nativeName: "日本語", flag: '🇯🇵', dir: 'ltr', tier: 2, completeness: 95, fallback: 'en-US', currency: 'JPY', dateFormat: 'YYYY/MM/DD', numberFormat: 'ja-JP', region: 'Asia', rtl: false }, 'ko-KR': { name: 'Korean', nativeName: '한국어', flag: '🇰🇷', dir: 'ltr', tier: 2, completeness: 95, fallback: 'en-US', currency: 'KRW', dateFormat: 'YYYY.MM.DD', numberFormat: 'ko-KR', region: 'Asia', rtl: false }, 'de-DE': { name: 'German', nativeName: 'Deutsch', flag: '🇩🇪', dir: 'ltr', tier: 3, completeness: 90, fallback: 'en-US', currency: 'EUR', dateFormat: 'DD.MM.YYYY', numberFormat: 'de-DE', region: 'Europe', rtl: false }, 'fr-FR': { name: 'French', nativeName: 'Français', flag: '🇫🇷', dir: 'ltr', tier: 3, completeness: 90, fallback: 'en-US', currency: 'EUR', dateFormat: 'DD/MM/YYYY', numberFormat: 'fr-FR', region: 'Europe', rtl: false }, 'es-ES': { name: 'Spanish', nativeName: 'Español', flag: '🇪🇸', dir: 'ltr', tier: 3, completeness: 90, fallback: 'en-US', currency: 'EUR', dateFormat: 'DD/MM/YYYY', numberFormat: 'es-ES', region: 'Europe', rtl: false } } as const; type SupportedLocale = keyof typeof SUPPORTED_LOCALES; const DEFAULT_LOCALE: SupportedLocale = 'en-US'; import { TRANSLATION_NAMESPACES, type NamespaceCategory, type LoadingStrategy } from './namespaces'; import { LOADING_STRATEGIES } from './loading-strategy'; // 🎯 主配置接口 export interface I18nConfig { defaultLocale: SupportedLocale; supportedLocales: typeof SUPPORTED_LOCALES; namespaces: typeof TRANSLATION_NAMESPACES; loadingStrategies: typeof LOADING_STRATEGIES; fallbackChain: Record<SupportedLocale, SupportedLocale[]>; cacheConfig: CacheConfig; performanceConfig: PerformanceConfig; } // 💾 缓存配置 export interface CacheConfig { memory: { maxSize: number; ttl: number; }; localStorage: { prefix: string; ttl: number; }; sessionStorage: { prefix: string; ttl: number; }; } // ⚡ 性能配置 export interface PerformanceConfig { maxBundleSize: { core: number; // 5KB pages: number; // 10KB features: number; // 15KB components: number; // 5KB }; loadingTimeout: number; retryAttempts: number; preloadThreshold: number; } // 🔄 回退链配置 const FALLBACK_CHAIN: Record<SupportedLocale, SupportedLocale[]> = { 'en-US': ['en-US'], // 英文无需回退 'zh-CN': ['zh-CN', 'en-US'], // 中文回退到英文 'ja-JP': ['ja-JP', 'en-US'], // 日文回退到英文 'ko-KR': ['ko-KR', 'en-US'], // 韩文回退到英文 'de-DE': ['de-DE', 'en-US'], // 德文回退到英文 'fr-FR': ['fr-FR', 'en-US'], // 法文回退到英文 'es-ES': ['es-ES', 'en-US'], // 西文回退到英文 }; // 🚀 主配置实例 export const I18N_CONFIG: I18nConfig = { defaultLocale: DEFAULT_LOCALE, supportedLocales: SUPPORTED_LOCALES, namespaces: TRANSLATION_NAMESPACES, loadingStrategies: LOADING_STRATEGIES, fallbackChain: FALLBACK_CHAIN, // 💾 缓存配置 cacheConfig: { memory: { maxSize: 100, // most多缓存100 items翻Translated text件 ttl: 30 * 60 * 1000 // 30 minutes }, localStorage: { prefix: 'yt-i18n-', ttl: 24 * 60 * 60 * 1000 // 24 hours }, sessionStorage: { prefix: 'yt-i18n-session-', ttl: 60 * 60 * 1000 // 1 hours } }, // ⚡ 性能配置 performanceConfig: { maxBundleSize: { core: 5 * 1024, // 5KB pages: 10 * 1024, // 10KB features: 15 * 1024, // 15KB components: 5 * 1024 // 5KB }, loadingTimeout: 5000, // 5 seconds超时 retryAttempts: 3, // 重试3 times preloadThreshold: 0.8 // 80%概率预加载 } }; // 🎯 配置验证函数 export function validateI18nConfig(config: I18nConfig): boolean { // 验证默认语言是否在支持列表中 if (!(config.defaultLocale in config.supportedLocales)) { console.error(`Default locale ${config.defaultLocale} not in supported locales`); return false; } return true; } // 🌍 语言检测和select export function detectUserLocale(): SupportedLocale { // 1. 检查URL参数 if (typeof window !== 'undefined') { const urlParams = new URLSearchParams(window.location.search); const urlLocale = urlParams.get('locale') as SupportedLocale; if (urlLocale && urlLocale in SUPPORTED_LOCALES) { return urlLocale; } } // 2. 检查localStorage if (typeof window !== 'undefined') { const savedLocale = localStorage.getItem('yt-locale') as SupportedLocale; if (savedLocale && savedLocale in SUPPORTED_LOCALES) { return savedLocale; } } // 3. 检查浏览器语言 if (typeof navigator !== 'undefined') { const browserLocales = navigator.languages || [navigator.language]; for (const browserLocale of browserLocales) { // 精确匹配 if (browserLocale in SUPPORTED_LOCALES) { return browserLocale as SupportedLocale; } // 语言代码匹配 (如 zh -> zh-CN) const langCode = browserLocale.split('-')[0]; const matchedLocale = Object.keys(SUPPORTED_LOCALES).find( locale => locale.startsWith(langCode) ) as SupportedLocale; if (matchedLocale) { return matchedLocale; } } } // 4. Back默认语言 return DEFAULT_LOCALE; } // 💾 Save用户语言偏好 export function saveUserLocale(locale: SupportedLocale): void { if (typeof window !== 'undefined') { localStorage.setItem('yt-locale', locale); } } // 🔄 获取回退链 export function getFallbackChain(locale: SupportedLocale): SupportedLocale[] { return FALLBACK_CHAINlocale || [DEFAULT_LOCALE]; } // 📦 获取命名空间配置 export function getNamespaceConfig(namespace: string) { return TRANSLATION_NAMESPACESnamespace; } // ⚡ 获取加载strategies export function getLoadingStrategy(namespace: string): LoadingStrategy { const config = TRANSLATION_NAMESPACESnamespace; return config ? config.loadingStrategy: 'lazy'; } // 导出类型和常量 export type { SupportedLocale, NamespaceCategory, LoadingStrategy }; export { SUPPORTED_LOCALES, DEFAULT_LOCALE, TRANSLATION_NAMESPACES, LOADING_STRATEGIES };